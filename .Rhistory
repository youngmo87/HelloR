head(data)
data[data$pass, ]
data$pass = ifelse(data$평균 >= 60, TRUE, FALSE)
head(data)
data[data$pass, ]
data$scout = ifelse(data$평균 >= 60,
ifelse(data$성별 == '남', 'BoyScout', 'GirlScout'),
'')
abc = data$scout = ifelse(data$평균 >= 60,
ifelse(data$성별 == '남', 'BoyScout', 'GirlScout'),
'')
abc
data
qplot(data$pass)
qplot(data$scout)
data$scout
data$scout[c('BoyScout', 'GirlScout')]
data$scout['BoyScout']
data$scout[BoyScout]
data$scout['BoyScout']
data[data$scout == 'BoyScout',]
data[data$scout == 'GirlScout',]
eg1 = data[data$scout == 'BoyScout'|data$scout == 'GirlScout',]
qplot(eg1)
eg1
qplot(eg1$scout)
#2
data
data$grade = ifelse(data$평균 >= 90, A, FALSE)
#2
data
data$grade = ifelse(data$평균 >= 90, A & data$평균 >= 80, B)
data$grade = ifelse(data$평균 >= 90, A | data$평균 >= 80, B)
data$grade = ifelse(data$평균 >= 90, A)
data$grade = ifelse(data$평균 >= 90, A, False)
#2
data
data$grade = ifelse(data$평균 >= 90, A, False)
data$grade = ifelse(data$평균 >= 90, A, FAIL)
data$grade = ifelse(data$평균 >= 90, A, FAIL)
#2
data
data$grade = ifelse(data$평균 >= 80, B, FAIL)
data$grade = ifelse(data$평균 >= 70, C, FAIL)
data$grade = ifelse(data$평균 >= 60, D, FAIL)
#2
data
data$grade = ifelse(data$평균 >= 60, D)
data$grade = ifelse(data$평균 >= 90, A)
data$grade = ifelse(data$평균 >= 80, B)
data$grade = ifelse(data$평균 >= 70, C)
data$grade = ifelse(data$평균 >= 60, D)
#2
data
data$grade = ifelse(data$평균 >= 90, A, B)
data$grade = ifelse(data$평균 >= 80, B, C)
data$grade = ifelse(data$평균 >= 70, C, D)
data$grade = ifelse(data$평균 >= 60, D, F)
#2
data
# Try this 190228-3 ####
#1
data
#trythis2
total = data$국어 + data$영어 + data$수학 + data$과학 + data$예체
new_t=cbind(data, total/5)
colnames(new_t)[9]='평균'
data=new_t
idata=new_t[new_t$국어 > 80, ]
colnames(idata)
dim(idata)
aggregate(data=idata, 국어~반, mean)
data$pass = ifelse(data$평균 >= 60, TRUE, FALSE)
aggregate(data=idata, cbind(국어,영어,수학,과학,예체)~반, mean)
head(data)
data[data$pass, ]
abc = data$scout = ifelse(data$평균 >= 60,
ifelse(data$성별 == '남', 'BoyScout', 'GirlScout'),
'')
# Try this 190228-3 ####
#1
data
# Try this 190228-3 ####
#1
data
data$grade = ifelse(data$평균 >= 90, A)
data$grade = ifelse(data$평균 >= 90, A, w)
data$grade = ifelse(data$평균 >= 80, B, w)
data$grade = ifelse(data$평균 >= 70, C, w)
data$grade = ifelse(data$평균 >= 60, D, Fail)
data
colnames(new_t)[9]='평균'
data$grade = ifelse(data$평균 >= 90, A, w)
data$grade = ifelse(data$평균 >= 80, B, w)
data$grade = ifelse(data$평균 >= 70, C, w)
data$grade = ifelse(data$평균 >= 60, D, Fail)
data
#trythis2
total = data$국어 + data$영어 + data$수학 + data$과학 + data$예체
new_t=cbind(data, total/5)
colnames(new_t)[9]='평균'
data=new_t
idata=new_t[new_t$국어 > 80, ]
colnames(idata)
colnames(new_t)[9]='평균'
data=new_t
idata=new_t[new_t$국어 > 80, ]
colnames(idata)
# Try this 190228-3 ####
#1
data
#2
data
# data ####
data
new_t
data
str(data)
data[,8]
rownames(data)[8]
rownames(data)[10]
colnames(data)[10]
colnames(data)[11]
colnames(data)[12]
colnames(data)[13]
data = data[,-c(12,13,14)]
data
colnames(data)[9]='평균'
data
data$grade = ifelse(data$평균 >= 90, A, w)
data$grade = ifelse(data$평균 >= 80, B, w)
data$grade = ifelse(data$평균 >= 70, C, w)
data$grade = ifelse(data$평균 >= 60, D, Fail)
data
data$grade = ifelse(data$평균 >= 90, A, w)
data$grade = ifelse(data$평균 >= 90, A, B)
data
data$grade = ifelse(data$평균 >= 90, A)
data$grade = ifelse(data$평균 >= 90, A, B)
data$grade = ifelse(data$평균 >= 80, B, w)
data$grade = ifelse(data$평균 >= 90, A, B )
data$grade = ifelse(data$평균 >= 90, 'A', 'B' )
data
data$grade = ifelse(data$평균 >= 80, 'B','')
data$grade = ifelse(data$평균 >= 90, 'A', '' )
data$grade = ifelse(data$평균 >= 80, 'B','')
data$grade = ifelse(data$평균 >= 70, 'C', '')
data$grade = ifelse(data$평균 >= 60, 'D', 'Fail')
data
data$grade = ifelse(data$평균 >= 90, 'A', '' )
data
data$grade = ifelse(data$평균 >= 80, 'B','')
data
# ggplot2::mpg ####
library(ggplot2)
midwest = as.data.frame(ggplot2::midwest)
summary(midwest)
colnames(midwest)
head(midwest)
str(mpg)
View(mpg)
mpg[-order(mpg$hwy), ]
mpg[order(mpg$hwy), ]
mpg[-order(mpg$hwy), ]
try1 = mpg[-order(mpg$hwy), ]
View(try1)
try1
try1
try1 = mpg[order(mpg$hwy), ]
try1
try1 = mpg[order(-mpg$hwy), ]
try1
View(try1)
#try1
try1 = mpg[order(mpg$hwy + mph$cty), ]
View(try1)
mpg = as.data.frame(ggplot2::mpg)
str(mpg)
View(mpg)
#try1
try1 = mpg[order(mpg$hwy + mph$cty), ]
#try1
try1 = mpg[order(mpg$hwy + mpg$cty), ]
View(try1)
#try1
try1 = mpg[order(-(mpg$hwy + mpg$cty)), ]
View(try1)
#try2
summary(mpg)
#try2
summary(mpg)
#try2
str(mpg)
mpg$fl
mpg[mpg$fl,]
mpg[order(mpg$fl),]
mpg[order(mpg$fl),]
mpg[order(mpg$year),]
View(mpg[order(mpg$year),])
aggregate(data=mpg, (mpg$hwy + mpg$cty)~fl, mean)
aggregate(data=mpg, (mpg$hwy + mpg$cty)~(fl, year), mean)
aggregate(data=mpg, (mpg$hwy + mpg$cty)~(fl), mean)
aggregate(data=mpg, (mpg$hwy + mpg$cty)~(fl & year), mean)
aggregate(data=mpg, (mpg$hwy + mpg$cty)~(fl & year), mean)
aggregate(data=mpg, (mpg$hwy + mpg$cty)~year, mean)
aggregate(data=mpg, cbind(year,(mpg$hwy + mpg$cty))~fl, mean)
aggregate(data=mpg, cbind(fl,(mpg$hwy + mpg$cty))~year, mean)
aggregate(data=mpg, cbind(fl,(mpg$hwy + mpg$cty))~year, mean)
aggregate(data=mpg, cbind(year,(mpg$hwy + mpg$cty))~fl, mean)
mpg[order(mpg$fl),]
aggregate(data=mpg, (mpg$hwy + mpg$cty))~fl, mean)
View(mpg[order(mpg$year),])
mpg[mpg$f1,]
mpg[mpg$f1,]
abc = mpg[mpg$f1,]
abc
mpg[order(mpg$fl),]
abcd = mpg[mpg$f1,]
abcd
data = 0
data
#2
data
View(midwest)
View(midwest)
load("C:/workspace/r/hellor/data/meltop100.rda")
data
View(df100)
View(eg1)
load("C:/workspace/r/hellor/.RData")
data
load("C:/workspace/r/hellor/data/meltop100.rda")
data
abc
View(data)
data
data[1:8]
#try1
try1 = mpg[order(-(mpg$hwy + mpg$cty)), ]
View(try1)
mpg = as.data.frame(ggplot2::mpg)
str(mpg)
View(mpg)
#try2
str(mpg)
mpg[order(mpg$fl),]
View(mpg[order(mpg$year),])
abcd = mpg[mpg$f1,]
aggregate(data=mpg, (mpg$hwy + mpg$cty))~fl, mean)
#try2
str(mpg)
trythis2=mpg[mpg$year & mpg$fl,]
trythis2=mpg[mpg$year,mpg$fl]
trythis2=mpg[mpg$year,]
trythis2
trythis2=mpg[mpg$year]
eg2 = aggregate(data=mpg, cbin(year, fl) ~(mpg$hwy + mpg$cty), mean)
eg2 = aggregate(data=mpg, cbind(year, fl) ~(mpg$hwy + mpg$cty), mean)
abcd = mpg[mpg$f1,]
abcd
#try2
str(mpg)
mpg[order(mpg$fl),]
abcd = mpg[mpg$f1,]
abcd
abcd
abcd = mpg[,mpg$f1]
abcd
abcd = mpg[mpg$year,]
abcd
View(mpg[order(mpg$year),])
abcd = mpg[mpg$year,]
abcd
eg2 = aggregate(data=mpg, year~fl)
View(mpg[order(mpg$year),])
View(mpg[mpg$year,])
eg2 = aggregate(data=mpg, year~fl, mean)
eg2
eg2 = aggregate(data=mpg, cbind(year,fl)~(mpg$hwy + mpg$cty), mean)
warnings()
eg2 = aggregate(data=mpg, cbind(year,fl)~mpg$hwy, mean)
eg2 = aggregate(data=mpg, cbind(year,fl)~(hwy+cty), mean)
eg2 = aggregate(data=mpg, cbind(year,fl)~hwy, mean)
str(mpg)
eg2 = aggregate(data=mpg, cbind(year,fl)~ hwy, mean)
eg2 = aggregate(data=mpg, cbind(mpg$year,mpg$fl)~ hwy, mean)
totalfl = mpg$hwy + mpg$cty
eg2 = aggregate(data=mpg, year~totalfl, mean)
eg2
eg2 = aggregate(data=mpg, cbind(year,fl)~totalfl, mean)
eg2 = aggregate(data=mpg, cbind(fl,year)~totalfl, mean)
eg2 = aggregate(data=mpg, fl~totalfl, mean)
#try2
str(mpg)
eg2 = aggregate(data=mpg, totalfl~fl, mean)
eg2
eg2 = aggregate(data=mpg, cbin(year, totalfl)~fl, mean)
eg2 = aggregate(data=mpg, cbind(year, totalfl)~fl, mean)
eg2
eg2 = aggregate(data=mpg, fl~cbind(year, totalfl), mean)
eg2 = aggregate(data=mpg, year~cbind(fl, totalfl), mean)
eg2 = aggregate(data=mpg, cbind(year, totalfl)~cbind(fl, totalfl), mean)
eg2 = aggregate(data=mpg, cbind(year, fl)~cbind(fl, totalfl), mean)
eg2 = aggregate(data=mpg, (year, fl)~(fl, totalfl), mean)
eg2 = aggregate(data=mpg, year~cbind(year, totalfl), mean)
eg2 = aggregate(data=mpg, fl~cbind(year, totalfl), mean)
eg2 = aggregate(data=mpg, fl~totalfl, mean)
eg2 = aggregate(data=mpg, fl~totalfl, mean)
eg2 = aggregate(data=mpg, totalfl~fl, mean)
eg2
eg2 = aggregate(data=mpg, cbind(year, totalfl)~fl, mean)
eg2
eg3 = aggregate(data=mpg, totalfl~year, mean)
eg3
eg2 +eg3
eg2 = aggregate(data=mpg, totalfl~(year+fl), mean)
eg
eg2
eg2 = eg2[order(eg2$year)]
str(eg2)
eg2 = eg2[order(eg2$year),]
eg2
midwest = as.data.frame(ggplot2::midwest)
summary(midwest)
View(midwest)
tpop = aggregate(data=midwest, poptotal~state, mean)
tpop
apop = aggregate(data=midwest, popasian~state, mean)
apop
colnames(midwest)
colnames(midwest$poptotal)
colnames(midwest)[colnames(midwest) == poptotal] = c('total')
colnames(midwest)[colnames(midwest) == popasian] = c('asian')
colnames(midwest)[colnames(midwest) == 'poptotal'] = c('total')
colnames(midwest)[colnames(midwest) == 'popasian'] = c('asian')
colnames(midwest)
View(midwest)
sum(midwest$asian)
asianpct = midwest$asian/sumsian
asianpct = midwest$asian/sumasian
asianpct = midwest$asian/sumasian
# 5번 ####
sumasian = sum(midwest$asian)
asianpct = midwest$asian/sumasian
new_c=cbind(data, asianpct)
new_c=cbind(midwest, asianpct)
View(midwest)
View(new_c)
qplot(new_c$asianpct)
library(ggplot2)
qplot(new_c$asianpct)
View(new_c)
# 6번 ####
qplot(midwest$asian)
# 6번 ####
qplot(new_c$asian)
library(psych)
hist(new_c$asianpct)
# 6번 ####
hist(new_c$asian)
# 6번 ####
describe(new_c$asian)
# 6번 ####
describe(new_c$asian)
View(new_c)
eg6 = aggregate(data=new_c, asian~state, mean)
eg6
eg6 = aggregate(data=new_c, asian~state, sum)
eg6
hist(eg6)
qplot(eg6)
str(eg6)
hist(eg6$state)
hist(eg6$asian)
qplot(eg6$asian)
eg6 = aggregate(data=new_c, asian~county, sum)
str(eg6)
qplot(eg6$asian)
eg6
eg6 = aggregate(data=new_c, asian~state, sum)
str(eg6)
eg6
eg6 = aggregate(data=new_c, asian~county, sum)
describe(eg6)
eg6 = aggregate(data=new_c, asian~county, sum)
str(eg6)
describe(eg6)
eg6 = aggregate(data=new_c, asian~state, sum)
str(eg6)
describe(eg6)
boxplot(new_c$asian)
# 7번 ####
mean(new_c$asianpct)
# 7번 ####
sum(new_c$asianpct)
# 7번 ####
mean(new_c$asianpct)
# 7번 ####
meanpct = mean(new_c$asianpct)
# 7번 ####
meanpct = mean(new_c$asianpct)
new_c$asianrate = ifelse(new_c$asianpct > meanpct, 'lg', 'sm')
View(new_c)
# 8번 ####
gplot(new_c$asianrate)
# 8번 ####
ggplot(new_c$asianrate)
# 8번 ####
ggplot(new_c$asianrate)
# 8번 ####
ggplot(new_c$asianrate)
# 8번 ####
new_c$asianrate
# 8번 ####
qplot(new_c$asianrate)
rep(1, times=3)
rep(LETTERS[1:3], each=3)
rep(LETTERS[1:3], times=3)
rep(c('I', 'am'), times=2, length.out=7)
data.frame(customer=rep(c('김일수','김이수'), each=2),
menu = rep(c('짜장','짬뽕'), times=2))
5.5:-4.5
seq(5.4:-4.5)
,
seq(5.4,4.5)
seq(5.4, -4.5)
smdt = data.frame(stuno = 1:5,
Korean = sample(60:100, 5),
English=sample((5:10)*10,5),
Math=sample(50:100,5))
smdt
nchar(s)
s = 'abc,egf,abc'
nchar(s)
toupper(s)
substr(s,1,5)
strsplit(s,',')
sub('abc', 'ttt', s)
gsub('abc','ttt',s)
cat(S)
cat(s)
cat(s)print(s)
print(s)
s = "first\tsecond\nthird"
cat(s)
print(s)
paste('aaa-bbb', 'ccc-ddd', sep='**')
paste(data[1:3, '반'], collapse='**')
data
outer(month.abb, 2011:2020, paste, sep='-')
outer(LETTERS, 2010:2020, paste0)
outer(month.abb, 2011:2020, paste, sep='-')
outer(LETTERS, 2010:2020, paste0)
grep(pattern='^2', x=data$학번, value = T)
grep(pattern='^2', x=data$학번, value = T)
outer(LETTERS, 2010:2020, paste0)
outer(LETTERS, 2010:2020, paste)
outer(LETTERS, 2010:2020, paste0)
outer(month.abb, 2011:2020, paste, sep='-')
grep(pattern='^2', x=data$학번, value = T)
grep(pattern='^2.*0$', x=data$학번, value = T)
as.Date('2019-03-04 09:00')
dt1 = as.POSIXct('2019-04-04 09:00')
seq(dt1, as.POSIXct('2019-04-01'), by='day')
seq(dt1, as.POSIXct('2019-04-01'), by='day')
dt1 = as.POSIXct('2019-04-04 09:00')
seq(dt1, as.POSIXct('2019-04-01'), by='day')
as.Date('2019-03-04 09:00')
dt1 = as.POSIXct('2019-04-04 09:00')
dt1
seq(dt1, as.POSIXct('2019-04-01'), by='2 hour')
seq(dt1, as.POSIXct('2019-04-01 23:59'), by='min')
install.packages('lubridate')
library(lubridate)
02/28')
ymd('2019/02/28')
ymd('2019/02/28')
year(dt1)
day(dt1) = 15
dt1
n_month(1:12)
days_in_month(1:12)
as.Date('2019-03-04 09:00')
dt1 = as.POSIXct('2019-04-04 09:00')
seq(dt1, as.POSIXct('2019-04-01'), by='day')
as.Date('2019-03-04 09:00')
dt1 = as.POSIXct('2019-04-04 09:00')
dt1
year(dt1)
day(dt1) = 15
days_in_month(1:12)
dt1 = as.POSIXct('2019-04-04 09:00')
seq(dt1, as.POSIXct('2019-04-01'), by='day')
as.Date('2019-03-04 09:00')
seq(dt1, as.POSIXct('2019-04-01'), by='day')
dt1 = as.POSIXct('2019-04-04 09:00')
seq(dt1, as.POSIXct('2019-04-01'), by='day')
seq(dt1, as.POSIXct('2019-04-01'), by='2 hour')
seq(dt1, as.POSIXct('2019-04-01 23:59'), by='min')
dt1 = as.POSIXct('2019-04-04 09:00')
seq(dt1, as.POSIXct('2019-04-01'), by='day')
seq(dt1, as.POSIXct('2019-04-01 23:59'), by='min')
dt1 = as.POSIXct('2019-04-15 09:00')
seq(dt1, as.POSIXct('2019-04-01'), by='day')
dt1 = as.POSIXct("2019-04-15 09:00")
seq(dt1, as.POSIXct('2019-04-01'), by='day')
as.POSIXct('20190304')
dt1 = as.POSIXct('2019-04-15 09:00')
seq(dt1, as.POSIXct('2019-04-01'), by='day')
dt1 = as.POSIXct('2019-04-15 09:00')
dt1
seq(dt1, as.POSIXct('2019-04-01'), by='day')
